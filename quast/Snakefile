import pandas as pd
import numpy as np
import os
jn = os.path.join

#snakemake -p --profile qsub_hs_test --keep-going --immediate-submit --use-conda
#snakemake -np --dag | dot -Tsvg > dag.svg # draw dag graph


## Config
configfile: "../metaAndconfig/config.yaml"

CHROMOSOMES = [str(i) for i in range(1,25) if i not in [23] ] # +  ['MT']

sample_mt = pd.read_csv(config["sample_mt"],
                                dtype=str, sep='\t').set_index("sequence_id", drop=False)
sample_mt.drop_duplicates(inplace=True)
n_samples = len(sample_mt)
id_list = sample_mt["sequence_id"].tolist()
#id_list = ["TESTFILE"]
readnames = ["1P", "2P"]
kmer_ext = ["lower", "upper", "optimal"]
assembly = ["SOAP", "ABYSS", "DISCOVAR"]

rule all:
    input:
        #expand("../trimmed/bam/{id}_trim.bam", id = id_list)
        #expand("../assemblies/{id}_DISCOVAR/a.final/a.fasta", id = id_list)
        #expand("../metaAndconfig/bestN50/{id}_{assembler}_highestN50.txt", id = id_list, assembler = assembly),
        #expand("../RagTag/{id}_{assembler}_ragtag/{id}_ragtag.scaffolds.fasta", id = id_list[0], assembler = assembly)
        #expand("../reports/BUSCO_contigs/{{id}}_{{assembler}}_busco/{{id}}_{{assembler}}_busco/run_{}/short_summary.txt".format(config["BUSCO"]["lineage"]), id = id_list, assembler = assembly)
        expand("../RagTag/{id}_{assembler}_ragtag/{id}_{assembler}_ragtag.scaffolds.fasta", id = id_list, assembler = assembly)


rule DiscoVarPrep:
    input:
        fRead = "../trimmed/{id}_1P_trim.fastq",
        rRead = "../trimmed/{id}_2P_trim.fastq"
    output:
        bam = "../trimmed/bam/{id}_trim.bam"
    threads: 24 
    resources:
        mem_gb = 150,
        walltime = 12
    conda:
        "../envs/bamprep.yml"
    shell:
        "picard FastqToSam F1={input.fRead} F2={input.rRead} O={output.bam} SM={wildcards.id}" # RG=rg0013"

rule DiscovarDenovo:
    input:
        bam = "../trimmed/bam/{id}_trim.bam"
    output:
        "../assemblies/{id}_DISCOVAR/a.final/a.fasta"
    params:
        outdir = "../assemblies/{id}_DISCOVAR/",
        logfile = "../assemblies/{id}_DISCOVAR/{id}_DISCOVAR.log"
        #outID = "{id}_DISCOVAR"
    threads: 24
    resources:
        mem_gb = 210,
        walltime = 48
    conda:
        "../envs/discovar-denovo.yml"
    shell:
        "DiscovarDeNovo READS={input.bam} OUT_DIR={params.outdir} NUM_THREADS={threads} MAX_MEM_GB={resources.mem_gb} TEE={params.logfile}"

rule renameDiscovar:
    input:
        "../assemblies/{id}_DISCOVAR/a.final/a.fasta"
    output:
        "../assemblies/{id}_DISCOVAR/a.final/{id}_discovar.fasta"
    shell:
        "cp {input} {output}"

rule quast_contigs_summary:
    input:
        soapdenovo = expand("../assemblies/{id}_SOAPDENOVO/{id}_soap_{kmer}K.scafSeq", id = id_list,  kmer = kmer_ext),
        abyss = expand("../assemblies/{id}_ABySS/{id}_abyss_{kmer}K-scaffolds.fa", id = id_list,  kmer = kmer_ext),
        discovar = expand("../assemblies/{id}_DISCOVAR/a.final/{id}_discovar.fasta", id = id_list)
    output:
        "../reports/QUAST_contigs/transposed_report.tsv"
    params:
        outdir = "../reports/QUAST_contigs/"
    threads: 12
    conda:
        "../envs/QCenv.yml"
    shell:
        "quast.py -o {params.outdir} {input.soapdenovo} {input.abyss} {input.discovar} --threads {threads}" #-R {input.ref} -G {input.gff}"

rule extract_best_N50_contigs_for_BUSCO:
    input:
        "../reports/QUAST_contigs/transposed_report.tsv"
    output:
        "../metaAndconfig/bestN50/{id}_{assembler}_highestN50.txt"
    params:
        metadata = config["sample_mt"],
        outdir = "../metaAndconfig/bestN50/"
    shell:
        "python ../scripts/gethighestN50.py {wildcards.id} {params.metadata} {input} {params.outdir}"


rule BUSCO_contigs:
    input:
        "../metaAndconfig/bestN50/{id}_{assembler}_highestN50.txt"
    output:
        "../reports/BUSCO_contigs/{{id}}_{{assembler}}_busco/{{id}}_{{assembler}}_busco/run_{}/short_summary.txt".format(config["BUSCO"]["lineage"])
    params:
        outdir = "../reports/BUSCO_contigs/{id}_{assembler}_busco/",
        mode = config["BUSCO"]["mode"],
        lineage = config["BUSCO"]["lineage"],
        ids = "{id}_{assembler}_busco"
    threads: 24
    resources:
        mem_gb = 210,
        walltime = 48
    conda:
        "../envs/BUSCO.yml"
    shell:
        """
        contigfile=$(cat {input})
        echo Making BUSCO search on $contigfile
        busco -i $contigfile -l {params.lineage} -o {params.ids} --out_path {params.outdir} -m {params.mode} -c {threads} -f
        """

rule RagTag:
    input:
        query = "../metaAndconfig/bestN50/{id}_{assembler}_highestN50.txt",
        ref = config["reference"]["fasta"]
    output:
        "../RagTag/{id}_{assembler}_ragtag/{id}_{assembler}_ragtag.scaffolds.fasta"
    params:
        id = {id},
        outdir = "../RagTag/{id}_{assembler}_ragtag/"
    threads: 24
    resources:
        mem_gb = 200,
        walltime = 2
    conda:
        "../envs/RagTag.yml"
    shell:
        """
        contigfile=$(cat {input.query})
        echo Conducting RagTag correction on $contigfile
        ragtag.py correct {input.ref} $contigfile -o {params.outdir} -t {threads}
        filename=$(basename $(cat {input.query}) | awk -F "." '{{print $1".corrected.fasta"}}')
        ragtag.py scaffold {input.ref} {params.outdir}$filename -o {params.outdir} -t {threads}
        mv {params.outdir}ragtag.scaffolds.fasta {output}
        """

rule quast_RagTag:
    input:
        expand("../RagTag/{id}_{assembler}_ragtag/{id}_{assembler}_ragtag.scaffolds.fasta", id = id_list, assembler = assembly)
    output:
        "../reports/QUAST_RAGTAG/transposed_report.tsv"
    params:
        outdir = "../reports/QUAST_RAGTAG/"
    threads: 12
    conda:
        "../envs/QCenv.yml"
    shell:
        "quast.py -o {params.outdir} {input} --threads {threads}" 
